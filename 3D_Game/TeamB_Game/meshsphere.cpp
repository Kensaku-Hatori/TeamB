//============================================================
//
//メッシュスフィア[meshSphere.cpp]
//Author:Rio Ohno
//
//============================================================

// インクルード
#include "meshSphere.h"

// グローバル変数宣言
MeshSphere g_Sphere[MAX_MESHSPHERE];
LPDIRECT3DTEXTURE9 pTexture;											// テクスチャ用ポインタ

//======================================
//球の初期化処理
//======================================
void InitSphere(void)
{
	// 各種初期化
	for (int nCnt = 0; nCnt < MAX_MESHSPHERE; nCnt++)
	{
		g_Sphere[nCnt].pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);				// 位置
		g_Sphere[nCnt].rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);				// 向き
		g_Sphere[nCnt].col = D3DXCOLOR(0.5f, 1.0f, 1.0f, 1.0f);			// 色
		g_Sphere[nCnt].pVtxBuff = NULL;									// 頂点情報のポインタ
		g_Sphere[nCnt].pIndxBuff = NULL;								// インデックスバッファ
		g_Sphere[nCnt].Indx = nCnt;										// インデックス
		g_Sphere[nCnt].DiviX = 0;										// xの分割数
		g_Sphere[nCnt].DiviY = 0;										// yの分割数
		g_Sphere[nCnt].fRadius = 0.0f;									// 半径
		g_Sphere[nCnt].bHalf = false;									// 半球ではない状態にする
		g_Sphere[nCnt].bHead = true;									// 法線を表に向ける
		g_Sphere[nCnt].bUse = false;									// 使用していない状態にする
	}
	pTexture = NULL;													//テクスチャポインタ
}

//======================================
// 球の終了処理
//======================================
void UninitSphere(void)
{
	for (int nCnt = 0; nCnt < MAX_MESHSPHERE; nCnt++)
	{
		// 頂点情報の破棄
		if (g_Sphere[nCnt].pVtxBuff != NULL)
		{
			g_Sphere[nCnt].pVtxBuff->Release();
			g_Sphere[nCnt].pVtxBuff = NULL;
		}

		// テクスチャの破棄
		if (pTexture != NULL)
		{
			pTexture->Release();
			pTexture = NULL;
		}

		// インデックスバッファの破棄
		if (g_Sphere[nCnt].pIndxBuff != NULL)
		{
			g_Sphere[nCnt].pIndxBuff->Release();
			g_Sphere[nCnt].pIndxBuff = NULL;
		}
	}
}

//======================================
// 球の更新処理
//======================================
void UpdateSphere(void)
{

}

//======================================
// 球の描画処理
//======================================
void DrawSphere(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = GetDevice();

	// 計算用マトリックス
	D3DXMATRIX mtxRot, mtxTrans;

	////ライトを切る
	//pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

	for (int nCnt = 0; nCnt < MAX_MESHSPHERE; nCnt++)
	{
		if (g_Sphere[nCnt].bUse == true)
		{
			// ワールドマトリックスの初期化
			D3DXMatrixIdentity(&g_Sphere[nCnt].mtxWorld);

			//向きを反転
			D3DXMatrixRotationYawPitchRoll(&mtxRot, g_Sphere[nCnt].rot.y, g_Sphere[nCnt].rot.x, g_Sphere[nCnt].rot.z);
			D3DXMatrixMultiply(&g_Sphere[nCnt].mtxWorld, &g_Sphere[nCnt].mtxWorld, &mtxRot);

			// 位置を反映
			D3DXMatrixTranslation(&mtxTrans, g_Sphere[nCnt].pos.x, g_Sphere[nCnt].pos.y, g_Sphere[nCnt].pos.z);
			D3DXMatrixMultiply(&g_Sphere[nCnt].mtxWorld, &g_Sphere[nCnt].mtxWorld, &mtxTrans);

			// ワールドマトリックスの設定
			pDevice->SetTransform(D3DTS_WORLD, &g_Sphere[nCnt].mtxWorld);

			// 頂点バッファをデータストリームに設定
			pDevice->SetStreamSource(0, g_Sphere[nCnt].pVtxBuff, 0, sizeof(VERTEX_3D));

			// 頂点フォーマットの設定
			pDevice->SetFVF(FVF_VERTEX_3D);

			// テクスチャの設定
			pDevice->SetTexture(0, NULL);

			// ポリゴンを描画
			pDevice->DrawPrimitive(D3DPT_TRIANGLEFAN, 0, g_Sphere[nCnt].DiviX);

			if (g_Sphere[nCnt].DiviY >= 2)
			{
				// インデックスバッファをデータストリームに設定
				pDevice->SetIndices(g_Sphere[nCnt].pIndxBuff);

				// メッシュ壁を描画
				pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLESTRIP, 1, 1, g_Sphere[nCnt].nMaxVtx, 0, g_Sphere[nCnt].nPolyNum);
			}
		}
	}
	////ライトをつける
	//pDevice->SetRenderState(D3DRS_LIGHTING, TRUE);
}

//======================================
// 球の設定処理
//======================================
int SetSphere(D3DXVECTOR3 pos, int DiviX,int DiviY, float fRadius, bool bHead,bool bHalf)
{
	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = GetDevice();
	VERTEX_3D* pVtx = NULL;
	int nCnt = 0;

	for (nCnt = 0; nCnt < MAX_MESHSPHERE; nCnt++)
	{
		if (g_Sphere[nCnt].bUse == false)
		{
			//各種設定
			g_Sphere[nCnt].pos = pos;									// 位置
			g_Sphere[nCnt].DiviX = DiviX;								// 分割数
			g_Sphere[nCnt].DiviY = DiviY + 1;							// 分割数
			g_Sphere[nCnt].fRadius = fRadius;							// 半径
			g_Sphere[nCnt].bHead = bHead;								// 法線
			g_Sphere[nCnt].bHalf = bHalf;								// 半球かどうか

			g_Sphere[nCnt].nMaxVtx = (g_Sphere[nCnt].DiviX + 1) * (g_Sphere[nCnt].DiviY) + 1;								// 頂点数
			g_Sphere[nCnt].nPolyNum = (2 * g_Sphere[nCnt].DiviX * (g_Sphere[nCnt].DiviY - 1));								// ポリゴン数
			int indexNum = (2 * (g_Sphere[nCnt].DiviY * (2 + g_Sphere[nCnt].DiviX) - 1));									// インデックス

			//頂点バッファの生成
			pDevice->CreateVertexBuffer(sizeof(VERTEX_3D) * g_Sphere[nCnt].nMaxVtx,
				D3DUSAGE_WRITEONLY,
				FVF_VERTEX_3D,
				D3DPOOL_MANAGED,
				&g_Sphere[nCnt].pVtxBuff,
				NULL);

			//頂点バッファをロックし、頂点情報へのポインタを取得
			g_Sphere[nCnt].pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

			int indx = 0;//頂点インデックス

			//ベクトルの保存用
			D3DXVECTOR3 vec = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

			for (int nCntY = 0; nCntY <= g_Sphere[nCnt].DiviY; nCntY++)
			{
				for (int nCntX = 0; nCntX <= g_Sphere[nCnt].DiviX; nCntX++)
				{
					int i = nCntX;

					if (g_Sphere[nCnt].bHead == false)
					{
						i = g_Sphere[nCnt].DiviX - nCntX;
					}
				
					//角度格納
					float fAngle = ((D3DX_PI * 2 / g_Sphere[nCnt].DiviX) * i);						//y軸
					float fAngle2 = (D3DX_PI / g_Sphere[nCnt].DiviY) * (DiviY - nCntY);				//z軸

					//半球なら
					if (g_Sphere[nCnt].bHalf == true)
					{
						fAngle2 = (((D3DX_PI * 0.5f) / g_Sphere[nCnt].DiviY )* nCntY);
					}

					//頂点の設定
					pVtx[indx].pos.x = g_Sphere[nCnt].fRadius * sin(fAngle2) * sin(fAngle);
					pVtx[indx].pos.y = g_Sphere[nCnt].fRadius * cos(fAngle2);
					pVtx[indx].pos.z = g_Sphere[nCnt].fRadius * sin(fAngle2) * cos(fAngle);

					//各頂点のベクトル
					if (g_Sphere[nCnt].bHead == false)
					{
						//中心へのベクトル
						vec = g_Sphere[nCnt].pos - pVtx[indx].pos;
					}
					if (g_Sphere[nCnt].bHead == true)
					{
						//外側へのベクトル
						vec = pVtx[indx].pos - g_Sphere[nCnt].pos;
					}

					//ベクトルの正規化,各頂点の法線の設定
					D3DXVec3Normalize(&pVtx[indx].nor, &vec);

					//頂点カラーの設定
					pVtx[indx].col = g_Sphere[nCnt].col;

					//テクスチャ座標の設定
					pVtx[indx].tex = D3DXVECTOR2((1.0f / g_Sphere[nCnt].DiviX) * nCntX, (1.0f / g_Sphere[nCnt].DiviY) * nCntY);

					//頂点インデックスを進める
					indx++;

					//頂点が0番目だったなら
					if (indx == 1)
					{
						//ループを抜ける
						break;
					}
				}
			}

			//頂点バッファをアンロック　
			g_Sphere[nCnt].pVtxBuff->Unlock();

			//インデックスバッファの設定
			if (g_Sphere[nCnt].DiviY >= 2)
			{
				//インデックスへのポインタ
				WORD* pIdx = NULL;

				//インデックスバッファの生成
				pDevice->CreateIndexBuffer(sizeof(WORD) * indexNum,
					D3DUSAGE_WRITEONLY,
					D3DFMT_INDEX16,
					D3DPOOL_MANAGED,
					&g_Sphere[nCnt].pIndxBuff,
					NULL);

				//インデックスバッファをロック
				g_Sphere[nCnt].pIndxBuff->Lock(0, 0, (void**)&pIdx, 0);

				int nCntX = 0;
				for (int nCntY = 0; nCntY < g_Sphere[nCnt].DiviY; nCntY++)
				{
					for (nCntX = 0; nCntX <= g_Sphere[nCnt].DiviX; nCntX++)
					{
						//インデックスの設定
						pIdx[0] = (g_Sphere[nCnt].DiviX + 1) * (nCntY + 1) + (DiviX-nCntX);
						pIdx[1] = (DiviX - nCntX) + (nCntY * (g_Sphere[nCnt].DiviX + 1));

						pIdx += 2;
					}

					//衰退ポリゴン分
					if (nCntY < g_Sphere[nCnt].DiviY - 1)
					{
						//インデックスの設定
						pIdx[0] = ((DiviX - nCntX) - 1) + (nCntY * (g_Sphere[nCnt].DiviX + 1));
						pIdx[1] = (DiviX - nCntX) + ((nCntY + 1) * (g_Sphere[nCnt].DiviX + 1));

						pIdx += 2;
					}
				}

				//インデックスバッファをアンロック
				g_Sphere[nCnt].pIndxBuff->Unlock();
			}

			//球を使用してる状態にする
			g_Sphere[nCnt].bUse = true;
			break;
		}
	}
	return nCnt;						//球のインデックスを返す
}